// Code generated by "stringer -type=LexAnToken"; DO NOT EDIT.

package expreval

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenBad-0]
	_ = x[TokenEnd-1]
	_ = x[TokenLParen-2]
	_ = x[TokenRParen-3]
	_ = x[TokenOpAssign-4]
	_ = x[TokenOpPlus-5]
	_ = x[TokenOpMinus-6]
	_ = x[TokenOpMultiply-7]
	_ = x[TokenOpDivide-8]
	_ = x[TokenOpPower-9]
	_ = x[TokenVariable-10]
	_ = x[TokenNumber-11]
}

const _LexAnToken_name = "TokenBadTokenEndTokenLParenTokenRParenTokenOpAssignTokenOpPlusTokenOpMinusTokenOpMultiplyTokenOpDivideTokenOpPowerTokenVariableTokenNumber"

var _LexAnToken_index = [...]uint8{0, 8, 16, 27, 38, 51, 62, 74, 89, 102, 114, 127, 138}

func (i LexAnToken) String() string {
	if i < 0 || i >= LexAnToken(len(_LexAnToken_index)-1) {
		return "LexAnToken(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _LexAnToken_name[_LexAnToken_index[i]:_LexAnToken_index[i+1]]
}
